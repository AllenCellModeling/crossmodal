_target_: crossmodal.models.CrossModalVAE
latent_dim: [128]
x_labels: ['image', 'rna']
class_labels: []
image_dims: 
rna_dims: 
x_dims: [${image_dims}, {rna_dims}]
encoder:
  image:
    _target_: serotiny.networks.BasicCNN
    in_channels: ${image_dims}
    output_dim: ${latent_dim}
    hidden_channels: [4, 4, 4, 4]
    kernel_size: 3
    stride: 1
    max_pool_layers: [2]
  rna: 
    _target_: serotiny.networks.MLP
    scale_output: 1
    hidden_layers: [256, 256]
    _args_: 
    - ${rna_dims}
    - ${latent_dim}

decoder:
  image:
    _target_: crossmodal.networks.SymmetricImageDecoder
    encoder: ${model.encoder.image}
  rna: 
    _target_: serotiny.networks.MLP
    scale_output: 1
    hidden_layers: [256, 256]
    _args_: 
    - ${latent_dim}
    - ${rna_dims}

reconstruction_loss:
  "image+image":
    _target_: torch.nn.MSELoss
    reduction: 'none'
  "rna+rna":
    _target_: torch.nn.MSELoss
    reduction: 'none'
  "image+rna":
    _target_: torch.nn.MSELoss
    reduction: "none"
  "rna+image"
    _target_: torch.nn.MSELoss
    reduction: "none"

latent_loss:
  image:
    _target_: serotiny.losses.AdversarialLoss
    discriminator:
      _target_: serotiny.networks.MLP
      hidden_layers: [64]
      _args_: 
      - ${model.latent_dim}
      - 1
    loss:
      _target_: torch.nn.BCELoss
    argmax: True
  rna:
    _target_: serotiny.losses.AdversarialLoss
    discriminator:
      _target_: serotiny.networks.MLP
      hidden_layers: [64]
      _args_: 
      - ${model.latent_dim}
      - 1
    loss:
      _target_: torch.nn.BCELoss
    argmax: True

prior:
  image: 
    _target_: serotiny.models.vae.priors.IsotropicGaussianPrior
    dimensionality: ${model.latent_dim}
  rna: 
    _target_: serotiny.models.vae.priors.IsotropicGaussianPrior
    dimensionality: ${model.latent_dim}

latent_loss_weights:
  image: [1,1,1,1,1]
  rna: [1,1,1,1,1]

latent_loss_target:
  image: 
    - ["image_binary", {class_labels}]
    - ["image_binary", {class_labels}]
    - ["image_binary" {class_labels}]
    - ["image_binary", {class_labels}]
    - [rna_binary]
  rna: 
    - ["rna_binary", {class_labels}]
    - ["rna_binary", {class_labels}]
    - ["rna_binary", {class_labels}]
    - ["rna_binary", {class_labels}]
    - [image_binary, {class_labels}]
    - [rna_binary]

# latent_loss_backprop_when: # when to optimize each subnetwork
#   image: [1, 5]
#   rna: [1, 5]

latent_loss_optimizer: 
  adv:
    keys: ['image', 'rna']
    opt:
      _partial_: true
      _target_: torch.optim.adam.Adam
      lr: 0.001

latent_loss_scheduler: 
  adv:
    _partial_: true
    _target_: torch.optim.lr_scheduler.StepLR
    step_size: 45

optimizer: 
  main:
    keys: ['image', 'rna']
    opt:
      _partial_: true
      _target_: torch.optim.Adam
      lr: 1e-3

lr_scheduler:
  main:
    _partial_: true
    _target_: torch.optim.lr_scheduler.StepLR
    step_size: 45


